package forth;

import java.io.BufferedReader;
import java.io.Console;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

import forth.commands.IgnoreCommand;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

/**
 *
 *
 */
public class Interpreter {
//    private static final Logger LOGGER = LogManager.getLogger();

    public Interpreter() throws IOException {
    }

    public Interpreter(ExecutionContext ctx) throws IOException {
        context = ctx;
    }

    public ExecutionContext getContext(){
        return context;
    }
    
    public void changeContext(ExecutionContext ctx){
        context = ctx;
    }

    /**
     * <p>Gets one token from context</p>
     * <p>Gets command from factory based on that token</p>
     * <p> Tries to execute it</p>
     * <p> Displays message generated by commands to UserInterface</p>
     */
    public void executeOne(){
        if (!context.getTokens().isEmpty()){
            String token = context.getTokens().get(context.getCurrentTokenIndex());
            context.setCurrentTokenIndex(context.getCurrentTokenIndex() + 1);
            try {
                Command cmd = context.getFactory().getCommand(token);
                if (cmd != null) {
//                    LOGGER.debug("Executing '{}' command", cmd);
                    cmd.execute(context);
                } else {
                    long value = Long.parseLong(token);
                    if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE) {
                        throw new CommandExecutionException(token, "Number isn't in integer bounds");
                    }
                    context.getStack().push((int) value);
                }
            } catch (CommandException | IOException e) {
//                LOGGER.debug("Exception command: ", e.getMessage());
                throw new CommandExecutionException(token, e.getMessage());
            }
        }
        if (!context.getMessageBuffer().isEmpty()) {
            consoleInterface.displayMessage(context.getMessageBuffer());
            context.clearMessageBuffer();
        }
    }

    public void executeLine(String line) {
        List<String> tokens = Arrays.asList(line.split("(?<=\\s)|(?=\\s)")); //get tokens separated by whitespaces
        context.setTokens(tokens);
        context.setCurrentTokenIndex(0);

        while (context.getCurrentTokenIndex() < tokens.size()) {
            executeOne();
//            String token = tokens.get(context.getCurrentTokenIndex());
//            context.setCurrentTokenIndex(context.getCurrentTokenIndex() + 1);
//                try {
//                    Command cmd = context.getFactory().getCommand(token);
//                    if (cmd != null) {
//                        cmd.execute(context);
//                    } else {
//                        int number = Integer.parseInt(token);
//                        context.getStack().push(number);
//                    }
//                } catch (CommandException | IOException e) {
//                    throw new CommandExecutionException(token, e.getMessage());
//                }
        }
    }

    public void REPL() throws IOException {
            while (true) {
                String line = consoleInterface.readLine();
                if (line.equalsIgnoreCase("q")) {
                    break;
                }
                executeLine(line);
                consoleInterface.printStack(context.getStack());
            }
    }

    public void executeFile(String filename) throws IOException {
        String fullContent = readFileAsString(filename);
        executeLine(fullContent);

//        try (BufferedReader buffRdr = new BufferedReader(new FileReader(filename))) { //read data by blocks
//            String line;
//            while ((line = buffRdr.readLine()) != null) {
//                executeLine(line);
//            }
//        }
    }

    public String readFileAsString(String filename) throws IOException {
        StringBuilder content = new StringBuilder();
        try (FileReader reader = new FileReader(filename)) {
            int character;
            while ((character = reader.read()) != -1) {
                content.append((char) character);
            }
        }
        return content.toString();
    }

    private ExecutionContext context = new ExecutionContext();
    ConsoleInterface consoleInterface = new ConsoleInterface();
}
