        -:    0:Source:/home/krillin/code/nsu/23203_knyazkov/lab1/src/ctors.cpp
        -:    1:#include "hashtable.h"
        -:    2:#include <climits>
        -:    3:#include <stdexcept>
        -:    4:
function _ZN9HashTableC2Ev called 16 returned 100% blocks executed 77%
       16:    5:HashTable::HashTable() : capacity(DEF_CAPACITY), size(0) {
      16*:    6:  table = new HashNode *[capacity];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
      176:    7:  for (size_t i = 0; i < capacity; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      160:    8:    table[i] = new HashNode();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 never executed (fallthrough)
branch  5 never executed
call    6 never executed
        -:    9:  }
       16:   10:};
        -:   11:
function _ZN9HashTableD2Ev called 26 returned 100% blocks executed 100%
       26:   12:HashTable::~HashTable() {
      240:   13:  for (size_t i = 0; i < capacity; i++) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
      214:   14:    if (table[i] != nullptr)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
      203:   15:      delete table[i];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
        -:   16:  }
       26:   17:  delete[] table;
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
call    2 returned 100%
       26:   18:};
        -:   19:
function _ZN9HashTableC2ERKS_ called 1 returned 100% blocks executed 57%
        1:   20:HashTable::HashTable(const HashTable &other)
        1:   21:    : capacity(other.capacity), size(other.size) {
       1*:   22:  table = new HashNode *[capacity];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
        -:   23:
       11:   24:  for (int i = 0; i < capacity; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:   25:    if (other.table[i] != nullptr) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:   26:      table[i] = new HashNode(*other.table[i]);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 never executed (fallthrough)
branch  5 never executed
call    6 never executed
        -:   27:    } else {
    #####:   28:      table[i] = new HashNode(); // empty node
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
branch  4 never executed (fallthrough)
branch  5 never executed
call    6 never executed
        -:   29:    }
        -:   30:  }
        1:   31:};
        -:   32:
function _ZN9HashTableC2Em called 9 returned 78% blocks executed 74%
        9:   33:HashTable::HashTable(size_t init_capacity) : size(0) {
        9:   34:  if (init_capacity == 0) {
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        2:   35:    throw std::invalid_argument("WHY ARE YOU DOING THIS?");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 0%
call    5 never executed
        -:   36:  }
        7:   37:  capacity = init_capacity;
       7*:   38:  table = new HashNode *[capacity];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
       27:   39:  for (int i = 0; i < capacity; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
       20:   40:    table[i] = new HashNode();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 never executed (fallthrough)
branch  5 never executed
call    6 never executed
        7:   41:};
        -:   42:
function _ZN9HashTableC2EOS_ called 2 returned 100% blocks executed 100%
        2:   43:HashTable::HashTable(HashTable &&other)
        2:   44:    : capacity((other.capacity)), size(other.size) {
        2:   45:  table = other.table;
        2:   46:  size = other.size;
        2:   47:  capacity = other.capacity;
        -:   48:
        2:   49:  other.table = nullptr;
        2:   50:  other.capacity = 0;
        2:   51:  other.size = 0;
        2:   52:};
