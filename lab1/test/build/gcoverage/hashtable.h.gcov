        -:    0:Source:/home/krillin/code/nsu/23203_knyazkov/lab1/src/hashtable.h
        -:    1:#pragma once
        -:    2:
        -:    3:#include <string>
        -:    4:
        -:    5:static constexpr size_t DEF_CAPACITY = 10;
        -:    6:static constexpr double MAX_LOAD_FACTOR = 0.7;
        -:    7:
        -:    8:typedef std::string Key;
        -:    9:
        -:   10:struct Value {
        -:   11:  unsigned age;
        -:   12:  unsigned weight;
        -:   13:
       2*:   14:  bool operator==(const Value &b) {
       2*:   15:    return ((this->age == b.age) && (this->weight == b.weight));
        -:   16:  }
------------------
_ZN5ValueeqERKS_:
function _ZN5ValueeqERKS_ called 2 returned 100% blocks executed 83%
        2:   14:  bool operator==(const Value &b) {
       2*:   15:    return ((this->age == b.age) && (this->weight == b.weight));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   16:  }
------------------
_ZN5ValueeqERKS_:
function _ZN5ValueeqERKS_ called 0 returned 0% blocks executed 0%
    #####:   14:  bool operator==(const Value &b) {
    #####:   15:    return ((this->age == b.age) && (this->weight == b.weight));
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -:   16:  }
------------------
        -:   17:
function _ZN5ValueneERKS_ called 0 returned 0% blocks executed 0%
    #####:   18:  bool operator!=(const Value &b) { return !(*this == b); }
call    0 never executed
        -:   19:};
        -:   20:
        -:   21:struct HashNode {
        -:   22:  Value value;
        -:   23:  Key key;
        -:   24:
        -:   25:  // default = deleted\empty node
     232*:   26:  HashNode() {
     232*:   27:    this->key = "";
     232*:   28:    this->value = {0, 0};
     232*:   29:  }
------------------
_ZN8HashNodeC2Ev:
function _ZN8HashNodeC2Ev called 232 returned 100% blocks executed 80%
      232:   26:  HashNode() {
call    0 returned 100%
      232:   27:    this->key = "";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      232:   28:    this->value = {0, 0};
      232:   29:  }
call    0 never executed
------------------
_ZN8HashNodeC2Ev:
function _ZN8HashNodeC2Ev called 0 returned 0% blocks executed 0%
    #####:   26:  HashNode() {
call    0 never executed
    #####:   27:    this->key = "";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   28:    this->value = {0, 0};
    #####:   29:  }
call    0 never executed
------------------
_ZN8HashNodeC2Ev:
function _ZN8HashNodeC2Ev called 0 returned 0% blocks executed 0%
    #####:   26:  HashNode() {
call    0 never executed
    #####:   27:    this->key = "";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   28:    this->value = {0, 0};
    #####:   29:  }
call    0 never executed
------------------
        -:   30:
function _ZN8HashNodeC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE5Value called 57 returned 100% blocks executed 80%
       57:   31:  HashNode(Key key, Value value) {
call    0 returned 100%
       57:   32:    this->value = value;
       57:   33:    this->key = key;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       57:   34:  }
call    0 never executed
        -:   35:
     253*:   36:  ~HashNode() {};
------------------
_ZN8HashNodeD2Ev:
function _ZN8HashNodeD2Ev called 253 returned 100% blocks executed 100%
      253:   36:  ~HashNode() {};
call    0 returned 100%
------------------
_ZN8HashNodeD2Ev:
function _ZN8HashNodeD2Ev called 0 returned 0% blocks executed 0%
    #####:   36:  ~HashNode() {};
call    0 never executed
------------------
_ZN8HashNodeD2Ev:
function _ZN8HashNodeD2Ev called 0 returned 0% blocks executed 0%
    #####:   36:  ~HashNode() {};
call    0 never executed
------------------
        -:   37:};
        -:   38:
        -:   39:class HashTable {
        -:   40:private:
        -:   41:  HashNode **table;
        -:   42:  size_t capacity;
        -:   43:  size_t size;
        -:   44:  int hash(const Key &key) const;
        -:   45:
        -:   46:public:
        -:   47:  HashTable();
        -:   48:  ~HashTable();
        -:   49:
        -:   50:  HashTable(size_t init_capacity);
        -:   51:  HashTable(const HashTable &other);
        -:   52:  HashTable(HashTable &&other);
        -:   53:
        -:   54:  void swap(HashTable &other);
        -:   55:
        -:   56:  HashTable &operator=(const HashTable &other);
        -:   57:
        -:   58:  HashTable &operator=(HashTable &&other);
        -:   59:
        -:   60:  int linearProbing(int startIndex, Key key) const;
        -:   61:  void rehashIfNeeded();
        -:   62:  int find(const Key &k) const;
        -:   63:  double getLoadFactor(double const &size, double const &capacity);
        -:   64:
        -:   65:  void clear();
        -:   66:  bool erase(const Key &k);
        -:   67:  bool insert(const Key &k, const Value &v);
        -:   68:
        -:   69:  bool contains(const Key &k) const;
        -:   70:
        -:   71:  Value &operator[](const Key &k);
        -:   72:
        -:   73:  Value &at(const Key &k);
        -:   74:  const Value &at(const Key &k) const;
        -:   75:
        -:   76:  size_t getSize() const;
        -:   77:  size_t getCapacity() const;
        -:   78:  bool empty() const;
        -:   79:
        -:   80:  friend bool operator==(const HashTable &a, const HashTable &b);
        -:   81:  friend bool operator!=(const HashTable &a, const HashTable &b);
        -:   82:};
