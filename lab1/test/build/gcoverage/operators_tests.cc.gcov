        -:    0:Source:/home/krillin/code/nsu/23203_knyazkov/lab1/test/src/operators_tests.cc
        -:    1:#include "../src/operators.cpp"
        -:    2:#include <gtest/gtest.h>
        -:    3:
        4:    4:TEST(operators_tests, brackets_test_1){
        1:    5:    HashTable a = HashTable();
        1:    6:    const Value value = {1, 1};
        2:    7:    a.insert("Key", value);
       2*:    8:    EXPECT_TRUE(a["Key"] == value);
        1:    9:}
------------------
_ZN36operators_tests_brackets_test_1_TestC2Ev:
function _ZN36operators_tests_brackets_test_1_TestC2Ev called 1 returned 100% blocks executed 100%
        1:    4:TEST(operators_tests, brackets_test_1){
call    0 returned 100%
------------------
_ZN36operators_tests_brackets_test_1_TestD0Ev:
function _ZN36operators_tests_brackets_test_1_TestD0Ev called 1 returned 100% blocks executed 100%
        1:    4:TEST(operators_tests, brackets_test_1){
call    0 returned 100%
call    1 returned 100%
------------------
_ZN36operators_tests_brackets_test_1_TestD2Ev:
function _ZN36operators_tests_brackets_test_1_TestD2Ev called 1 returned 100% blocks executed 100%
        1:    4:TEST(operators_tests, brackets_test_1){
call    0 returned 100%
------------------
_ZN36operators_tests_brackets_test_1_Test8TestBodyEv:
function _ZN36operators_tests_brackets_test_1_Test8TestBodyEv called 1 returned 100% blocks executed 37%
        1:    4:TEST(operators_tests, brackets_test_1){
        1:    5:    HashTable a = HashTable();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:    6:    const Value value = {1, 1};
        2:    7:    a.insert("Key", value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
       2*:    8:    EXPECT_TRUE(a["Key"] == value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
call   18 never executed
call   19 never executed
branch 20 never executed (fallthrough)
branch 21 never executed (throw)
call   22 never executed
branch 23 never executed (fallthrough)
branch 24 never executed (throw)
call   25 never executed
call   26 never executed
call   27 never executed
call   28 returned 100%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
        1:    9:}
call    0 returned 100%
call    1 never executed
------------------
        -:   10:
        -:   11:// TEST(operators_tests, brackets_test_2){
        -:   12://     HashTable a = HashTable();
        -:   13://     Value empty = Value();
        -:   14://     EXPECT_TRUE(empty == a["something"]);
        -:   15:// }
        -:   16:
        -:   17:// TEST(operators_tests, copy_assignment_test_1){
        -:   18://    HashTable a = HashTable();
        -:   19://    Value Value1 = {1,1};
        -:   20://    Value Value2 = {2,2};
        -:   21://    Value Value3 = {3,3};
        -:   22:
        -:   23://     a.insert("Key1", Value1);
        -:   24://     a.insert("Key2", Value2);
        -:   25:    
        -:   26:
        -:   27://     HashTable b;
        -:   28://     b.insert("Key3", Value3);
        -:   29:
        -:   30://     b = a;
        -:   31:
        -:   32://     EXPECT_TRUE(b["Key1"] == Value1);
        -:   33://     EXPECT_TRUE(b["Key2"] == Value2);
        -:   34://     EXPECT_FALSE(b["Key3"] == Value3); // do not need to be here
        -:   35:// }
        -:   36:
        -:   37:// TEST(operators_tests, move_assignment_test_1){
        -:   38://     HashTable a = HashTable();
        -:   39://     size_t init_size = a.getSize();
        -:   40://     size_t init_capacity = a.getCapacity();
        -:   41://     a = std::move(a);
        -:   42://     EXPECT_EQ(init_size, a.getSize());
        -:   43://     EXPECT_EQ(init_capacity, a.getCapacity());
        -:   44:// }
        -:   45:
        -:   46:// TEST(operators_tests, move_assignment_test_2){
        -:   47://     HashTable a = HashTable();
        -:   48://     HashTable b = HashTable(1);
        -:   49://     b.insert("K", {1,1});
        -:   50://     size_t b_size = b.getSize();
        -:   51://     size_t b_capacity = b.getCapacity();
        -:   52://     a = std::move(b);
        -:   53:
        -:   54://     EXPECT_EQ(b_size, a.getSize());
        -:   55://     EXPECT_EQ(b_capacity, a.getCapacity());
        -:   56:// }
        -:   57:
        -:   58:// TEST(operators_tests, move_assignment_test_3){
        -:   59://     HashTable a = HashTable();
        -:   60://     HashTable b = HashTable(1);
        -:   61://     b.insert("K", {1,1});
        -:   62://     size_t b_size = b.getSize();
        -:   63://     size_t b_capacity = b.getCapacity();
        -:   64://     a = std::move(b);
        -:   65:
        -:   66://     EXPECT_EQ(b_size, a.getSize());
        -:   67://     EXPECT_EQ(b_capacity, a.getCapacity());
        -:   68:// }
        -:   69:
        -:   70:// TEST(operators_tests, move_assignment_test_4){
        -:   71://     HashTable a = HashTable();
        -:   72://     HashTable b = HashTable(2);
        -:   73://     b.insert("K", {1,1});
        -:   74:
        -:   75://     a = std::move(b);
        -:   76://     EXPECT_TRUE(b.empty());
        -:   77:// }
        -:   78:
        -:   79:// TEST(operators_tests, isEqual_test_1){
        -:   80://     HashTable a = HashTable();
        -:   81://     HashTable b = HashTable();
        -:   82:
        -:   83://     a.insert("KeyA", {1,1});
        -:   84://     b.insert("KeyA", {1,1});
        -:   85://     EXPECT_TRUE(a == b);
        -:   86:// }
        -:   87:
        -:   88:// TEST(operators_tests, isEqual_test_2) {
        -:   89://     HashTable a = HashTable();
        -:   90://     HashTable b = HashTable();
        -:   91:
        -:   92://     a.insert("KeyA", {1,1});
        -:   93://     b.insert("KeyA", {2,2});
        -:   94://     EXPECT_FALSE(a == b);
        -:   95:// }
        -:   96:
        -:   97:// TEST(operators_tests, isEqual_test_3) {
        -:   98://     HashTable a = HashTable(1);
        -:   99://     HashTable b = HashTable(2);
        -:  100://     b.insert("random", {2,2});
        -:  101:
        -:  102://     EXPECT_FALSE(a == b);
        -:  103:// }
