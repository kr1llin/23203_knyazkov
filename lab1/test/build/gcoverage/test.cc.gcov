        -:    0:Source:/home/krillin/code/nsu/23203_knyazkov/lab1/test/src/test.cc
        -:    1:#include "../src/hashtable.h"
        -:    2:#include <gtest/gtest.h>
        -:    3:
        -:    4:// memory/address sanitizer
        -:    5:// clang-tidy
        -:    6:
        -:    7://const-cast (для at())
        -:    8:
        -:    9:// for memory allocation errors - try catch bad_alloc
        -:   10:
        -:   11:// dont forget about private methods (use friend)
        -:   12:
        -:   13:// test copy\move construction
        -:   14:
        -:   15:// git_ignore this
        -:   16:
        -:   17:// think evil
        -:   18:
        -:   19:// check coverage in the end
        -:   20:
        -:   21:// ASSERT_* generate fatal failures when they fail. And abort the current func
        -:   22:// EXPECT_* generate nonfatal failures, which don't abort current function
        -:   23:
        -:   24:// память запрещённым способом.  <<<<<<<<<<< НАПИШИ ТЕСТ ВЫИСКИВАЮЩИЙ ЗАПРЕЩЁННУЮ ЗАПИСЬ\ОБРАЩЕНИЕ!!!
        -:   25:
        -:   26:/*
        -:   27:TEST(HashTable, isEmptyTest) {
        -:   28:
        -:   29:  ///
        -:   30:  HashTable ht;
        -:   31:
        -:   32:  ht.insert("abc", {1, 2});
        -:   33:  ht.erase("abc");
        -:   34:  EXPECT_TRUE(ht.empty());
        -:   35:
        -:   36:  ///
        -:   37:};
        -:   38:
        -:   39:TEST(HashTable, copyCtor){
        -:   40:  //IS TABLE REALLY BECOME NEW TABLE
        -:   41:
        -:   42:  //
        -:   43:}
        -:   44:
        -:   45:TEST(HashTable, moveCtor){
        -:   46:
        -:   47:}
        -:   48:
        -:   49:TEST(HashTable, rehashIfNeeded){
        -:   50:  //EXPECT: CURSIZE = OLDSIZE * 2
        -:   51:
        -:   52:  //NEW TABLE != nullptr or catche bad_alloc
        -:   53:
        -:   54:  //TEST IF OLD TABLE IN NEWTABLE (ALL IT'S ELEMENTS)
        -:   55:
        -:   56:  //CHECK IF OLD TABLE IS REALLY DESTROYED 
        -:   57:}
        -:   58:
        -:   59:TEST(HashTable, find){
        -:   60:  //insert -> find -> EXPECT NOT -1
        -:   61:
        -:   62:  //CHECK FOR EMPTY NODE (when key is "")
        -:   63:
        -:   64:  //CHECK FOR NOT EMPTY NODE
        -:   65:}
        -:   66:
        -:   67:TEST(HashTable, InsertTest) {
        -:   68:  // same object 10 times
        -:   69:  // insert and check if size've incremented
        -:   70:}
        -:   71:*/
        -:   72:
function main called 1 returned 100% blocks executed 100%
        1:   73:int main(int argc, char **argv){
        1:   74:  testing::InitGoogleTest(&argc, argv);
call    0 returned 100%
        1:   75:  return RUN_ALL_TESTS();
call    0 returned 100%
        -:   76:}
